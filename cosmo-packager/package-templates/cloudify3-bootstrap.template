#!/usr/bin/env bash

function pause(){
    read -p "$*"
}

function state_error
{
    echo "ERROR: ${1:-UNKNOWN} (status $?)" 1>&2
    exit 1
}

function state_error
{
    echo "ERROR: ${1:-UNKNOWN} (status $?)" 1>&2
    exit 1
}

function check_pkg
{
    echo "checking to see if package $1 is installed..."
    dpkg -s $1 || state_error "package $1 is not installed"
    echo "package $1 is installed"
}

function check_user
{
    echo "checking to see if user $1 exists..."
    id -u $1 || state_error "user $1 doesn't exists"
    echo "user $1 exists"
}

function check_port
{
    echo "checking to see if port $1 is opened..."
    nc -z $1 $2 || state_error "port $2 is closed"
    echo "port $2 on $1 is opened"
}

function check_dir
{
    echo "checking to see if dir $1 exists..."
    if [ -d $1 ]; then
        echo "dir $1 exists"
    else
        state_error "dir $1 doesn't exist"
    fi
}

function check_file
{
    echo "checking to see if file $1 exists..."
    if [ -f $1 ]; then
        echo "file $1 exists"
        # if [ -$2 $1 ]; then
            # echo "$1 exists and contains the right attribs"
        # else
            # state_error "$1 exists but does not contain the right attribs"
        # fi
    else
        state_error "file $1 doesn't exists"
}

function check_upstart
{
    echo "checking to see if $1 daemon is running..."
    status $1 || state_error "daemon $1 is not running"
    echo "daemon $1 is running"
}

function check_service
{
    echo "checking to see if $1 service is running..."
    service $1 status || state_error "service $1 is not running"
    echo "service $1 is running"
}

PKG_NAME="{{ name }}"
PKG_DIR="{{ package_dir }}"
LOG_FILE="/varl/log/cloudify3-bootstrap.log"

echo -e "\ncreating cosmo log dir..."
sudo mkdir -p /var/log/cosmo
check_dir "/var/log/cosmo"
echo -e "\ninstalling openjdk..."
sudo dpkg -i ${PKG_DIR}/openjdk-7-jdk/*.deb
check_pkg "openjdk-7-jdk"
echo -e "\ninstalling logstash..."
sudo dpkg -i ${PKG_DIR}/logstash/*.deb
check_pkg "logstash"
echo -e "\ninstalling elasticsearch..."
sudo dpkg -i ${PKG_DIR}/elasticsearch/*.deb
check_pkg "elasticsearch"
echo -e "\ninstalling kibana3..."
sudo dpkg -i ${PKG_DIR}/kibana3/*.deb
check_pkg "kibana3"
echo -e "\ninstalling riemann..."
sudo dpkg -i ${PKG_DIR}/riemann/*.deb
check_pkg "riemann"
echo -e "\napplying riemann config..."
sudo cp ${PKG_DIR}/package-configuration/riemann/* /etc/riemann
echo -e "\nrestarting riemann..."
sudo /etc/init.d/riemann start
echo -e "\ninstalling rabbitmq..."
sudo dpkg -i ${PKG_DIR}/rabbitmq-server/*.deb
check_pkg "rabbitmq-server"
echo -e "\nenabling rabbitmq management plugin..."
sudo rabbitmq-plugins enable rabbitmq_management
echo -e "\nenabling rabbitmq tracing plugin..."
sudo rabbitmq-plugins enable rabbitmq_tracing
echo -e "\nrestarting rabbitmq..."
sudo service rabbitmq-server restart
check_service "rabbitmq-server"
echo -e "\nrunning rabbitmq trace..."
sudo rabbitmqctl trace_on
echo -e "\ninstalling nginx..."
sudo dpkg -i ${PKG_DIR}/nginx/*.deb
check_pkg "nginx"
echo -e "\napplying nginx config..."
sudo cp ${PKG_DIR}/package-configuration/nginx/* /etc/nginx/conf.d
echo -e "\nrestarting nginx..."
sudo service nginx restart
check_service "nginx"
echo -e "\ninstalling workflow-jruby"
sudo dpkg -i ${PKG_DIR}/workflow-jruby/*.deb
check_pkg "workflow-jruby"
echo -e "\ninstalling virtualenv..."
sudo dpkg -i ${PKG_DIR}/virtualenv/*.deb
check_pkg "virtualenv"
echo -e "\ninstalling celery and manager plugins..."
sudo dpkg -i ${PKG_DIR}/celery/*.deb
check_pkg "celery"
echo -e "\ninstalling manager..."
sudo dpkg -i ${PKG_DIR}/manager/*.deb
check_pkg "manager"
echo -e "\ninstalling nodejs..."
sudo dpkg -i ${PKG_DIR}/nodejs/*.deb
check_pkg "nodejs"
echo -e "\ninstalling cosmo-ui..."
sudo dpkg -i ${PKG_DIR}/cosmo-ui/*.deb
check_pkg "cosmo-ui"
echo -e "\nCloudify3 installation completed successfully"