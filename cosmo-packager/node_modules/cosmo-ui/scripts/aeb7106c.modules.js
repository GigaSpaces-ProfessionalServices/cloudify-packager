"use strict";angular.module("cosmoUi",["gsUiInfra","angularFileUpload","ngCookies","ngRoute","ngSanitize"]).config(["$routeProvider",function(a){var b=window.isSettingsExists();a.when("/json",{templateUrl:"views/main.html",controller:"MainCtrl"}).when("/blueprints",{templateUrl:"views/plansIndex.html",controller:"PlansIndexCtrl"}).when("/blueprint",{templateUrl:"views/plans.html",controller:"PlansCtrl"}).when("/running-apps",{templateUrl:"views/runningApps.html",controller:"RunningappsCtrl"}).when("/events",{templateUrl:"views/events.html",controller:"EventsCtrl"}).when("/monitoring",{templateUrl:"views/plans.html"}).when("/logs",{templateUrl:"views/plans.html"}).when("/hosts",{templateUrl:"views/plans.html"}).when("/networks",{templateUrl:"views/plans.html"}).when("/floating-ips",{templateUrl:"views/plans.html"}).when("/storage",{templateUrl:"views/plans.html"}).when("/config",{templateUrl:"views/config.html",controller:"ConfigCtrl"}).otherwise({redirectTo:b?"/blueprints":"/config"})}]),angular.module("cosmoUi").controller("MainCtrl",["$scope","YamlService","$routeParams",function(a,b,c){var d=c.name||"mezzanine-app";console.log(["appName is",d]),b.load(c.id,function(b,c){b?(console.log(b),a.json="ERROR : "+b.message):(a.dataContainer=c,a.json=c.getJSON(),a.yaml=YAML.stringify(a.json,999,4))}),a.asString=function(){return JSON.stringify(a.json,0,4)}}]),angular.module("cosmoUi").controller("PlansCtrl",["$scope","YamlService","Layout","Render","$routeParams",function(a,b,c,d,e){var f=null;a.showFile=function(a){console.log(a.name)},a.section="general",a.$watch("section",function(){console.log("got a new section value")}),a.planName=e.name,a.renderer=d.Topology.D3,a.layouter=c.Topology.Tensor.init({xyPositioning:"relative"}),b.load(e.id,function(b,c){f=c,a.graph=c.getJSON()}),a.showDirectory=function(c){console.log(c.name),b.getFilesList("/"+c.name,function(b){a.files=b})},a.topologyHandlers={actionClick:function(b){var c=b.node,d=f.getNode(c.id);a.showProperties={properties:f.getProperties(d),policies:f.getPolicies(d),general:f.getGeneralInfo(d)}}},a.hideProperties=function(){a.showProperties=null}}]),angular.module("cosmoUi").controller("PlansIndexCtrl",["$scope","$location","$cookieStore","RestService",function(a,b,c,d){a.isAddDialogVisible=!1,a.selectedPlanId=null,a.lastExecutedPlan=null;var e=c.get("lastExecutedPlan");a.redirectTo=function(c){console.log(["redirecting to",c]),a.selectedPlanId=c.id,b.path("/blueprint").search({id:c.id,name:c.name})},a.toggleAddDialog=function(){a.isAddDialogVisible=a.isAddDialogVisible===!1},a.loadBlueprints=function(){d.loadBlueprints().then(function(b){a.plans=b})},a.executePlan=function(b){a.lastExecutedPlan=d.executeBlueprint(b.id),c.put("lastExecutedPlan",b.name),e=b.name},a.isExecuting=function(a){return a===e},a.loadBlueprints()}]),angular.module("cosmoUi").controller("EventsCtrl",["$scope","RestService","$routeParams",function(a,b,c){function d(){b.loadEvents({id:h,from:i}).then(null,null,function(b){if(void 0!==b.id&&void 0!==b.lastEvent&&b.events&&b.events.length>0){a.events=a.events.concat(b.events);for(var c=0;c<a.events.length;c++)"string"==typeof a.events[0]&&(a.events[c]=JSON.parse(a.events[c]))}})}function e(a,b){var c=f(a);return c&&g.hasOwnProperty(c)?g[c][b]:(console.log([a,"does not have field",b]),"")}function f(a){var b;return"policy"===a.type?"start_detection_policy"===a.policy?b="policy_success":"failed_detection_policy"===a.policy&&(b="policy_failed"):"workflow_stage"===a.type?-1!==a.stage.indexOf("Loading blueprint")?b="workflow_started":-1!==a.stage.indexOf("executed successfully")?b="workflow_success":-1!==a.stage.indexOf("Initializing monitoring policies")?b="workflow_initializing_policies":-1!==a.stage.indexOf("Initializing node")&&(b="workflow_initializing_node"):void 0!==g[a.type]&&(b=a.type),void 0!==b?b:a.type}var g={workflow_started:{text:"Workflow started",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_initializing_policies:{text:"Workflow initializing policies",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_initializing_node:{text:"Workflow initializing node",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_success:{text:"Workflow end successfully",icon:"event-icon-workflow-end-successfully","class":"event-text-green"},workflow_failed:{text:"Workflow failed",icon:"event-icon-workflow-failed","class":"event-text-red"},workflow_stage:{text:"Workflow Stage",icon:"event-icon-task-sent","class":"event-text-green"},task_started:{text:"Task started",icon:"event-icon-task-started","class":"event-text-green"},sending_task:{text:"Task sent",icon:"event-icon-task-sent","class":"event-text-green"},task_received:{text:"Task received",icon:"event-icon-task-sent","class":"event-text-green"},task_succeeded:{text:"Task end successfully",icon:"event-icon-task-success","class":"event-text-green"},task_failed:{text:"Task failed",icon:"event-icon-task-failed","class":"event-text-red"},policy_success:{text:"Policy end successfully started",icon:"event-icon-policy-success","class":"event-text-green"},policy_failed:{text:"Policy failed",icon:"event-icon-policy-failed","class":"event-text-red"}};a.events=[];var h=c.lastExecutedPlan,i=0;a.getEventClass=function(a){return e(a,"class")},a.getEventIcon=function(a){return e(a,"icon")},a.getEventText=function(a){return e(a,"text")||a.type},d()}]),angular.module("cosmoUi").controller("PopupCtrl",["$scope",function(a){var b=null;a.mainFileName="mezzanine_blueprint.yaml",a.uploadEnabled=!1,a.uploadInProcess=!1,a.selectedFile="",a.onFileSelect=function(b){a.selectedFile=b[0],console.log(["files were selected",b])},a.uploadFile=function(){if(console.log(["upload: ",b]),a.isUploadEnabled()){var c=new FormData;c.append("application_file_name",a.mainFileName),c.append("application_archive",a.selectedFile),a.uploadInProcess=!0,$.ajax({url:"/backend/blueprints/add",data:c,type:"POST",contentType:!1,processData:!1,cache:!1,xhrFields:{onprogress:function(a){a.lengthComputable?console.log("Loaded "+a.loaded/a.total*100+"%"):console.log("Length not computable.")}},success:function(){a.uploadInProcess=!1,a.loadBlueprints(),a.closeDialog()},error:function(){a.uploadInProcess=!1}})}},a.closeDialog=function(){a.toggleAddDialog()},a.isUploadEnabled=function(){return null!==a.selectedFile&&void 0!==a.mainFileName&&a.mainFileName.length>0&&!a.uploadInProcess}}]),angular.module("cosmoUi").controller("RunningappsCtrl",["$scope","RestService","$routeParams",function(a,b,c){function d(){b.loadEvents({id:h,from:i}).then(null,null,function(b){if(void 0!==b.id&&void 0!==b.lastEvent&&b.events&&b.events.length>0){a.events=a.events.concat(b.events);for(var c=0;c<a.events.length;c++)void 0!==a.events[c].node&&a.apps[e(a.events[c].node)].events.push(a.events[c])}})}function e(b){for(var c=-1,d=0;d<a.apps.length;d++)a.apps[d].name===b&&(c=d);return-1===c&&(a.apps.push({name:b,events:[]}),c=a.apps.length-1),c}function f(a,b){var c=g(a);return c&&j.hasOwnProperty(c)?j[c][b]:(console.log([a,"does not have field",b]),"")}function g(a){var b;return"policy"===a.type?"start_detection_policy"===a.policy?b="policy_success":"failed_detection_policy"===a.policy&&(b="policy_failed"):"workflow_stage"===a.type?-1!==a.stage.indexOf("Loading blueprint")?b="workflow_started":-1!==a.stage.indexOf("executed successfully")?b="workflow_success":-1!==a.stage.indexOf("Initializing monitoring policies")?b="workflow_initializing_policies":-1!==a.stage.indexOf("Initializing node")&&(b="workflow_initializing_node"):void 0!==j[a.type]&&(b=a.type),void 0!==b?b:a.type}var h=c.lastExecutedPlan,i=0,j={workflow_started:{text:"Workflow started",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_initializing_policies:{text:"Workflow initializing policies",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_initializing_node:{text:"Workflow initializing node",icon:"event-icon-workflow-started","class":"event-text-green"},workflow_success:{text:"Workflow end successfully",icon:"event-icon-workflow-end-successfully","class":"event-text-green"},workflow_failed:{text:"Workflow failed",icon:"event-icon-workflow-failed","class":"event-text-red"},workflow_stage:{text:"Workflow Stage",icon:"event-icon-task-sent","class":"event-text-green"},task_started:{text:"Task started",icon:"event-icon-task-started","class":"event-text-green"},sending_task:{text:"Task sent",icon:"event-icon-task-sent","class":"event-text-green"},task_received:{text:"Task received",icon:"event-icon-task-sent","class":"event-text-green"},task_succeeded:{text:"Task end successfully",icon:"event-icon-task-success","class":"event-text-green"},task_failed:{text:"Task failed",icon:"event-icon-task-failed","class":"event-text-red"},policy_success:{text:"Policy end successfully started",icon:"event-icon-policy-success","class":"event-text-green"},policy_failed:{text:"Policy failed",icon:"event-icon-policy-failed","class":"event-text-red"}};a.events=[],a.apps=[],a.selectedApp="",a.filters={connections:"on",modules:"on",middleware:"off",compute:"on",network:"on"},a.getEventClass=function(a){return f(a,"class")},a.getEventIcon=function(a){return f(a,"icon")},a.getEventText=function(a){return f(a,"text")||a.type},a.showEvents=function(b){a.selectedApp=b===a.selectedApp?"":b},d()}]),angular.module("cosmoUi").controller("ConfigCtrl",["$scope","$window","RestService",function(a,b,c){function d(){var b={valid:!0,messages:[]},c=new RegExp("^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),d=new RegExp("[^0-9]");return void 0!==a.cosmoServer&&0!==a.cosmoServer.length&&c.test(a.cosmoServer)||(b.valid=!1,b.messages.push("Invalid IP address entered")),(void 0===a.cosmoPort||0===a.cosmoPort.length||d.test(a.cosmoPort))&&(b.valid=!1,b.messages.push("Invalid port number entered")),b}a.cosmoServer="",a.cosmoPort="",a.onlyNumbers=/^\d+$/,a.errList=[],a.saveConfiguration=function(){var e=d();e.valid?(a.errList=[],c.setConfiguration({cosmoServer:a.cosmoServer,cosmoPort:a.cosmoPort}),b.location="/"):a.errList=e.messages}}]),angular.module("cosmoUi").directive("sideMenu",["$location",function(a){return{template:'<div class="side-menu"><div class="menu"><ul><li ng-repeat="item in items" ng-class="{selected:isSelected(item)}" ng-click="itemClick(item)"><a href="{{item.route}}"><div class="gs-icon-{{item.icon}} side-menu-icon"></div><div class="side-menu-title">{{item.label}}</div></a></li></ul></div> </div>',restrict:"A",scope:{},replace:!0,transclude:!0,link:function(b){b.items=[{route:"#blueprints",icon:"plans",label:"Blueprints"},{route:"#running-apps?lastExecutedPlan=mezzanine",icon:"running-apps",label:"Running Apps"},{route:"#events?lastExecutedPlan=mezzanine",icon:"events",label:"Events"},{route:"#monitoring",icon:"monitoring",label:"Monitoring"},{route:"#logs",icon:"logs",label:"Logs"},{route:"#hosts",icon:"hosts",label:"Hosts"},{route:"#networks",icon:"networks",label:"Networks"},{route:"#floating-ips",icon:"floating-ips",label:"Floating IPs"},{route:"#storage",icon:"storage",label:"Storage"}],b.selectedItem=null,b.isSelected=function(b){return a.path().substr(1)===b.route.substr(1).split("?")[0]},b.itemClick=function(a){b.selectedItem=a}}}}]),angular.module("cosmoUi").directive("toolBar",function(){return{template:'<div id="toolbarButtonsContainer"><input id="search" type="text" placeholder="Search on Cloudify..."/><div class="toolbarButton apps"></div><div class="toolbarButton on messages" id="messages"><div class="newAlerts">2</div></div></div>',restrict:"E",link:function(a){$(a).on(".apps","click",function(){console.log("apps button clicked")}),$(a).on(".messages","click",function(){console.log("messages button clicked")})}}}),angular.module("cosmoUi").directive("cosmoLayout",function(){return{templateUrl:"views/cosmoLayout.html",restrict:"C",transclude:!0,replace:!0,link:function(a,b){try{var c=b.find(".right-panel");$("#right-side-menu").remove(),$("#left-side-menu").after(c),c.attr("id","right-side-menu")}catch(d){console.log(d)}}}}),angular.module("cosmoUi").directive("checkboxToggle",function(){return{template:"<div ng-transclude></div>",transclude:"element",replace:!0,restrict:"A",scope:{value:"="},link:function(a,b){function c(){b.find("*").removeClass("active"),b.find("[value="+a.value+"]").addClass("active")}console.log(["toggle-checkbox directive",a.value]),b.on("click","button",function(c){try{b.find("*").removeClass("active"),a.$apply(function(){a.value=$(c.target).addClass("active").attr("value")}),console.log(["set new value on scope",a.value])}catch(c){console.log(c)}}),a.$watch("value",function(){c()}),c()}}}),angular.module("cosmoUi").directive("header",function(){return{template:'<div class="logo"></div><!--div class="current-user"><div id="user-icon"></div> <div id="user-name">{{loggedUser.name}}</div> <div id="logout-button" ng-click="logout()"></div> </div> <div class="search-box"><input type="text" id="search-field" placeholder="Search on Cloudify.."><input type="button" id="search-submit" ng-click="searchCloudify()"></div--> ',restrict:" A",link:function(a,b){a.loggedUser={name:"John Doe"},a.searchCloudify=function(){console.log("search "+b.find("#search-field").val())},a.logout=function(){console.log("logout")}}}}),angular.module("cosmoUi").directive("toggleSwitch",function(){return{template:'<div class="toggle-switch"><div id="toggle-switch-text">{{text}}</div><div id="toggle-switch-button" class="{{value}}" ng-click="toggleButton()"><div id="toggle-switch-button-text-on" class="toggle-switch-button-text" ng-show="isToggleOn()">ON</div><div id="toggle-switch-button-circle" class="{{value}}"></div><div id="toggle-switch-button-text-off" class="toggle-switch-button-text" ng-show="!isToggleOn()">OFF</div></div></div>',restrict:"EA",scope:{text:"@",value:"@"},link:function(a){a.toggleButton=function(){a.value="on"===a.value?"off":"on"},a.isToggleOn=function(){return a.value===!0}}}}),angular.module("cosmoUi").directive("eventsWidget",function(){return{template:'<div class="events-widget"><div id="events-widget-closed-tab" ng-show="!isOpen()" ng-click="toggleWidget()"><div id="events-widget-tab-text">Events ({{events.length}})</div></div><div id="events-widget-opened-widget" ng-show="isOpen()"><div id="events-widget-header">Events<div id="events-widget-header-close-button" ng-click="toggleWidget()">X</div></div><table id="events-widget-events-list"><tr ng-repeat="event in events"><td><div id="event-icon"></div><div id="event-type">{{event.type}}</div><div id="event-workflow">{{event.workflow}}</div></td></tr></table></div></div>',restrict:"EA",scope:{events:"@"},link:function(a){a.widgetOpen=!1,a.events=[{icon:"",type:"1",node:"1",task:"1",workflow:"1"},{icon:"",type:"2",node:"2",task:"2",workflow:"2"},{icon:"",type:"3",node:"3",task:"3",workflow:"3"},{icon:"",type:"4",node:"4",task:"4",workflow:"4"},{icon:"",type:"5",node:"5",task:"5",workflow:"5"}],a.isOpen=function(){return a.widgetOpen},a.toggleWidget=function(){a.widgetOpen=!a.widgetOpen}}}}),angular.module("cosmoUi").service("YamlService",["$http","YamlTreeParser","YamlGraphParser",function(a,b,c){function d(b){function d(b){var c="/backend/blueprints/get";m++,a({url:c,method:"GET",params:{id:b}}).success(function(a){var c=JSON.parse(a.plan);if(void 0!==c.imports){for(var d in c.imports)$.inArray(d,-1===j)&&j.push(c.imports[d]);h(j)}e(c),l[b]=c,void 0!==c.imports&&n++,i()&&o(null,p.getParsedResult())})}function e(a){p.parseResult(a)}function f(a){d(a,!0)}function g(a){setTimeout(function(){f(a)},1)}function h(a){for(var b=0;b<a.length;b++){var c=a[b];k.indexOf(c)<0&&(k.push(c),g(c))}}function i(){return n===k.length}var j=[],k=[],l={},m=0,n=0,o=b,p=c.newInstance();this.load=function(a){d(a)}}this.newInstance=function(){return new d(c.newInstance())},this.load=function(a,b){new d(b).load(a)}}]),angular.module("cosmoUi").service("YamlTreeParser",function(){}),angular.module("cosmoUi").service("YamlGraphParser",["PlanData",function(a){function b(){function a(a,b){return l.indexOf(a.type[0])-l.indexOf(b.type[0])}function b(a,b){return m.indexOf(a.name)-l.indexOf(b.name)}function d(){h={},h.nodes=i.nodes.sort(b).sort(a),h.edges=i.relationships}function e(){return j++}function f(a){var b=a.substring(a.indexOf(".")+1,a.lastIndexOf("_"));return b}function g(a){for(var b=[],d=null,g=null,h=0;h<a.nodes.length;h++){d=e(),g=a.nodes[h];var j={id:d,name:f(g.id),type:[n[g.type]||g.type],properties:g.properties,policies:g.policies,general:null};c.addNode($.extend({uid:d},g)),b.push(j),k[g.id]=j}i.nodes=b;var l=function(a){return[a]};for(h=0;h<a.nodes.length;h++){g=a.nodes[h],d=k[g.id].id;var m=[];void 0!==g.relationships&&(m=$.map(g.relationships,l));for(var o=0;m.length>0&&o<m.length;o++)i.relationships.push({source:d,target:k[m[o].target_id].id,type:m[o].type})}return b}var h={},i={types:[],serviceTemplates:[],relationships:[]},j=1,k={},l=["cloudify.types.host","cloudify.types.middleware_server","cloudify.types.app_module"],m=["webserver_host","postgres_host"],n={mezzanine_app_module:"cloudify.types.app_module",mezzanine_host:"cloudify.types.host",mezzanine_middleware:"cloudify.types.middleware_server"};this.getParsedResult=function(){return c.setJSON(h),c},this.parseResult=function(a){g(a),d()}}var c=a.newInstance();this.newInstance=function(){return new b}}]),angular.module("cosmoUi").service("PlanData",function(){function a(){function a(a){if(a.hasOwnProperty(b)){var c=a[b];if(v.hasOwnProperty(c))return v[c];console.log(["missing type",c])}return null}function h(a){if(a.hasOwnProperty(c)){var b=a[c];if(v.hasOwnProperty(b))return v[b];console.log(["type is missing",b])}else console.log(["node is missing type field",a]);return null}function i(b,c){var d=[],e=null,f=0,g={};for(b.hasOwnProperty(c)&&d.push(b[c]),e=h(b);null!==e;)e.hasOwnProperty(c)&&d.push(e[c]),e=a(e);if(0===d.length)return null;for(f=d.length-1;f>=0;f--)$.extend(g,d[f]);return g}function j(a){return i(a,d)}function k(a){var b=i(a,e),c={},d=0,f=null,h=null;for(d in b)b.hasOwnProperty(d)&&(f=b[d],f=$.extend({},f),h=f[g],delete f[g],c[h]=f);return c}function l(a){var b={name:a.name,type:n(a),relationships:m(a)};for(var c in b)b.hasOwnProperty(c)&&null===b[c]&&delete b[c];return b}function m(a){var b=i(a,f),c=[];for(var d in b)b.hasOwnProperty(d)&&c.push(b[d]);return c}function n(b){var c=[],d=null;for(d=h(b);null!==d;)d.hasOwnProperty(g)?c.push(d[g]):console.log(["nodeType does not have a name",b,d]),d=a(d);return 0===c.length&&console.log(["node is missing type field",b]),c}function o(a){v.hasOwnProperty(a.name)?console.log(["got duplicate definition for type ",a,v[a.name]]):(console.log(["adding type",a.name,a]),v[a.name]=a,x.push(a))}function p(a){u[a.uid]=a,w.push(a)}function q(){return y}function r(){return w}function s(){return x}function t(a){return u[a]}var u={},v={},w=[],x=[],y={};this.addNode=p,this.getProperties=j,this.getPolicies=k,this.addType=o,this.getNodes=r,this.getTypes=s,this.getGeneralInfo=l,this.getNode=t,this.getJSON=q,this.setJSON=function(a){y=a}}var b="derived_from",c="type",d="properties",e="policies",f="relationships",g="name";this.newInstance=function(){return new a}}),angular.module("cosmoUi").service("RestService",["$http","$timeout","$q",function(a,b,c){function d(){function b(b,c){var d={url:"/backend/"+b,method:"GET"};return void 0!==c&&(d=c),a(d).then(function(a){return console.log(["data loaded",a]),a.data})}this.load=function(a,c){return b(a,c)}}function e(a,b){return l.load(a,b)}function f(){return e("blueprints")}function g(a){e("blueprints/add",a)}function h(a){var b={url:"/backend/blueprints/execution",method:"POST",data:{planId:a,workflowId:"install"}};return e("blueprints/execution",b)}function i(a){function d(){console.log(["loading events",a]);var c={url:"/backend/events",method:"POST",data:a};e("events",c).then(function(c){a.from<c.lastEvent&&(a.from=c.lastEvent+1,f.notify(c)),b(d,3e3)})}var f=c.defer();return d(),f.promise}function j(a){var b={url:"/backend/settings",method:"POST",data:{settings:{cosmoServer:a.cosmoServer,cosmoPort:a.cosmoPort}}};return e("settings",b)}function k(){return e("settings")}var l=new d;this.loadBlueprints=f,this.addBlueprint=g,this.executeBlueprint=h,this.loadEvents=i,this.getConfiguration=k,this.setConfiguration=j}]),angular.module("cosmoUi").filter("yaml",function(){return function(a,b){return a?YAML.stringify(a,999,4):b}}),angular.module("cosmoUi").filter("eventTimeFilter",function(){return function(a){var b=new Date(a),c=(new Date).getTime(),d=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],e=b.getMilliseconds(),f=b.getMinutes(),g=b.getHours(),h=b.getDay(),i=b.getDate(),j=b.getMonth()+1,k="",l=c-a;return k=864e5>l?"Today":l>864e5&&2592e5>l?d[h]:i+"/"+j,k+" "+g+":"+f+":"+e}});