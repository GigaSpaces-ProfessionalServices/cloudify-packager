#!/bin/bash

if [[ "$(uname)" == 'Darwin' ]]; then
    DOCKER_BR_IP=$(boot2docker ssh ip route | awk '/docker0/ { print $NF }')
    DOCKER_EXT_IP=$(boot2docker ip)
  else
    DOCKER_BR_IP=$(ip route | awk '/docker0/ { print $NF }')
    DOCKER_EXT_IP="127.0.0.1"
fi

printf "docker bridge ip: $DOCKER_BR_IP\n"
printf "docker external ip: $DOCKER_EXT_IP\n"

function run_elasticsearch
{
  # elasticsearchdata
  docker run --name="elasticsearchdata" \
             docker_elasticsearch \
             echo ELASTICSEARCHDATA
  # elasticsearch
  docker run -d --hostname="elasticsearch" \
                --name="elasticsearch" \
                --publish=9200:9200 \
                --restart="always" \
                --volume=/var/log/cloudify/elasticsearch:/etc/service/elasticsearch/logs \
                --volumes-from elasticsearchdata \
                docker_elasticsearch
}

function run_rabbitmq
{
  docker run -d --hostname="rabbitmq" \
                --name="rabbitmq" \
                --publish=5672:5672 \
                --restart="always" \
                docker_rabbitmq
}

function run_influxdb
{
  # influxdbdata
  docker run --name="influxdbdata" \
             docker_influxdb \
             echo INFLUXDBDATA
  # influxdb
  docker run -d --hostname="influxdb" \
                --name="influxdb" \
                --publish=8083:8083 \
                --publish=8086:8086 \
                --restart="always" \
                --volumes-from influxdbdata \
                docker_influxdb
}

function run_logstash
{
  docker run -d --add-host=elasticsearch:${DOCKER_BR_IP} \
                --add-host=rabbitmq:${DOCKER_BR_IP} \
                --hostname="logstash" \
                --name="logstash" \
                --publish=9999:9999 \
                --restart="always" \
                --volume=/var/log/cloudify/logstash:/etc/service/logstash/logs \
                docker_logstash
}

function run_kibana
{
  docker run -d --add-host=elasticsearch:${DOCKER_BR_IP} \
                --hostname="kibana" \
                --name="kibana" \
                --publish=5601:5601 \
                --restart="always" \
                docker_kibana
}

function run_metrics_broker
{
  docker run -d --add-host=influxdb:${DOCKER_BR_IP} \
                --add-host=rabbitmq:${DOCKER_BR_IP} \
                --hostname="amqpinflux" \
                --name="amqpinflux" \
                --restart="always" \
                docker_amqpinflux
}

function run_frontend
{
  # frontenddata
  docker run --name="frontenddata" \
             docker_frontend \
             echo FRONTENDDATA
  # frontend
  docker run -d --add-host=rabbitmq:${DOCKER_BR_IP} \
                --add-host=elasticsearch:${DOCKER_BR_IP} \
                --add-host=fileserver:${DOCKER_BR_IP} \
                --hostname="frontend" \
                --name="frontend" \
                --publish=80:80 \
                --publish=53229:53229 \
                --publish=9001:9001 \
                --publish=8100:8100 \
                --restart="always" \
                --volumes-from frontenddata \
                docker_frontend
}

function run_riemann
{
  # riemanndata
  docker run --name="riemanndata" \
             docker_riemann \
             echo RIEMANNDATA
  # riemann
  docker run -d --add-host=rabbitmq:${DOCKER_BR_IP} \
                --add-host=frontend:${DOCKER_BR_IP} \
                --hostname="riemann" \
                --name="riemann" \
                --restart="always" \
                --volume=/var/log/cloudify/riemann:/etc/service/riemann/logs \
                --volumes-from riemanndata \
                docker_riemann
}

function run_mgmtworker
{
  # mgmtworkerdata
  docker run --name="mgmtdata" \
             --volume ~/:/tmp/home \
             --volume /root \
             docker_mgmtworker \
             /bin/sh -c "apt-get update && apt-get install -y curl sudo && \
             curl -L --fail -o /tmp/blah.deb http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m3-RELEASE/cloudify-ubuntu-agent_3.2.0-m3-b172_amd64.deb && \
             dpkg -i /tmp/blah.deb && \
             echo mgmt data container"
  # mgmtworker
  docker run -d --add-host=rabbitmq:${DOCKER_BR_IP} \
                --add-host=frontend:${DOCKER_BR_IP} \
                --hostname="mgmtworker" \
                --name="mgmtworker" \
                --restart="always" \
                docker_mgmtworker
}

function upload_context
{
  type curl >/dev/null 2>&1 || { echo >&2 "Curl not installed.  Aborting."; exit 1; }
  if [[ -a "provider_context" ]] ; then
    curl --fail --request POST --data @provider_context http://${DOCKER_EXT_IP}/provider/context --header "Content-Type:application/json"
  else
    printf "provider_context not found, Aborting.\n"; exit 1;
  fi
}

if [ "$1" == "elk" ]; then
  run_rabbitmq
  run_elasticsearch
  run_logstash
  run_kibana
elif [ "$1" == "mon" ]; then
  run_rabbitmq
  run_metrics_broker
  run_influxdb
elif [ "$1" == "frontend" ]; then
  run_rabbitmq
  run_elasticsearch
  run_frontend
  run_mgmtworker
else
  run_elasticsearch
  run_rabbitmq
  run_influxdb
  run_logstash
  run_kibana
  run_metrics_broker
  run_frontend
  run_riemann
  run_mgmtworker
  upload_context
fi