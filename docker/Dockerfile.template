FROM {{ image.repository }}:{{ image.tag }}
MAINTAINER {{ maintainer.name }}, {{ maintainer.email }}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - BASE
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# add all init and config files
ADD conf/ /opt/tmp/conf/
ADD init/ /opt/tmp/init/
# add utility functions
ADD utils/ /opt/tmp/utils/

# allow rc policies
RUN sed -i 's/101/0/g' /usr/sbin/policy-rc.d

# update local cache
RUN apt-get update
# install 3rd party components
#RUN apt-get install -y \
#    python-dev \
#    make \
#    curl \
#    openjdk-7-jdk \
#    python-software-properties \
#    g++ \
#    logrotate \
#    vim \
#    mlocate

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - RABBITMQ, DependsOn: ~
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies.
RUN apt-get install -y $(echo {{ rabbitmq.reqs }} | tr -d "',[]")
# download rabbit package
RUN curl {{ rabbitmq.package_url }} --create-dirs -o {{ rabbitmq.package_dest }}

ENV RABBITMQ_SERVICE_NAME {{ rabbitmq.service_name }}
ENV RABBITMQ_INIT_FILE /opt/tmp/init/$RABBITMQ_SERVICE_NAME.conf

# place init script in local init dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv $RABBITMQ_INIT_FILE /etc/init/ && \
    check_file "/etc/init/$RABBITMQ_SERVICE_NAME.conf"'

# install and run rabbitmq-server
RUN dpkg -i {{ rabbitmq.package_dest }} && \
    rabbitmq-plugins enable rabbitmq_management && \
    rabbitmq-plugins enable rabbitmq_tracing && \
    invoke-rc.d $RABBITMQ_SERVICE_NAME stop && \
    invoke-rc.d $RABBITMQ_SERVICE_NAME start && \
    rabbitmqctl trace_on
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - RIEMANN, DependsOn: langohr
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies.
RUN apt-get install -y $(echo {{ riemann.reqs }} | tr -d "',[]")
# download and set permissions on langohr jar.
RUN curl {{ riemann.langohr_url }} --create-dirs -o {{ riemann.langohr_dest }} && \
    chmod 644 {{ riemann.langohr_dest }}
# download riemann deb
RUN curl {{ riemann.package_url }} --create-dirs -o {{ riemann.package_dest }}

##### ENV #####
ENV RIEMANN_SERVICE_NAME {{ riemann.service_name }}
# riemann init file
ENV RIEMANN_INIT_FILE /opt/tmp/init/$RIEMANN_SERVICE_NAME.conf
ENV RIEMANN_SERVICE_DIR /opt/$RIEMANN_SERVICE_NAME/
##### ENV #####

# inject required env vars to init script
RUN sed -i '1s|^|RIEMANN_JAR_PATH='$RIEMANN_SERVICE_DIR$(basename {{ riemann.langohr_dest }})' \n|' $RIEMANN_INIT_FILE
# todo(adaml): inject init script the proper config path according to riemann-controller plugin path

# place jar in service dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
# place init script in local init dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv $RIEMANN_INIT_FILE /etc/init/ && \
    check_file "/etc/init/$RIEMANN_SERVICE_NAME.conf"'

    mv {{ riemann.langohr_dest }} $RIEMANN_SERVICE_DIR && \
    check_file "$RIEMANN_SERVICE_DIR$(basename {{ riemann.langohr_dest }})"'
# install riemann
RUN dpkg -i {{ riemann.package_dest }}

# todo(adaml): start riemann

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - NODEJS DependsOn: ~
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies.
#RUN apt-get install -y $(echo {{ nodejs.reqs }} | tr -d "',[]")
# download and install
RUN add-apt-repository -y {{ nodejs.repo_name }} && \
	apt-get update && \
    apt-get install -y nodejs
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - LOGSTASH DependsOn: ~
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies.
RUN apt-get install -y $(echo {{ logstash.reqs }} | tr -d "',[]")
# download jar file
RUN curl {{ logstash.package_url }} --create-dirs -o {{ logstash.package_dest }}

##### ENV #####
ENV LOGSTASH_SERVICE_NAME {{ logstash.service_name }}
ENV LOGSTASH_SERVICE_DIR /opt/$LOGSTASH_SERVICE_NAME/
# logstash init file
ENV LOGSTASH_INIT_FILE /opt/tmp/init/$LOGSTASH_SERVICE_NAME.conf
# logstash conf file
ENV LOGSTASH_CONF_FILE /opt/tmp/conf/$LOGSTASH_SERVICE_NAME.conf
##### ENV #####

# inject required env vars to init script
RUN sed -i '1s|^|LOGSTASH_JAR_PATH='$LOGSTASH_SERVICE_DIR$(basename {{ logstash.package_dest }})' \n|' $LOGSTASH_INIT_FILE
RUN sed -i '1s|^|LOGSTASH_CONF_PATH='/etc/$LOGSTASH_SERVICE_NAME.conf' \n|' $LOGSTASH_INIT_FILE

# create service dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mkdir -p $LOGSTASH_SERVICE_DIR && \
    check_dir "$LOGSTASH_SERVICE_DIR"'

# place jar in service dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv {{ logstash.package_dest }} $LOGSTASH_SERVICE_DIR && \
    check_file "$LOGSTASH_SERVICE_DIR$(basename {{ logstash.package_dest }})"'
# place init script in local init dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv $LOGSTASH_INIT_FILE /etc/init/ && \
    check_file "/etc/init/$LOGSTASH_SERVICE_NAME.conf"'
# place conf script in conf dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv $LOGSTASH_CONF_FILE /etc/ && \
    check_file "/etc/$LOGSTASH_SERVICE_NAME.conf"'

# start logstash
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    start $LOGSTASH_SERVICE_NAME && \
    check_upstart $LOGSTASH_SERVICE_NAME'

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - ELASTICSEARCH
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies
RUN apt-get install -y $(echo {{ elasticsearch.reqs }} | tr -d "',[]")
# download binaries
RUN curl {{ elasticsearch.package_url }} --create-dirs -o {{ elasticsearch.package_dest }}

##### ENV #####
ENV ELASTICSEARCH_SERVICE_NAME {{ elasticsearch.service_name }}
ENV ELASTICSEARCH_SERVICE_DIR /opt/$ELASTICSEARCH_SERVICE_NAME/

# elasticsearch init file
ENV ELASTICSEARCH_INIT_FILE /opt/tmp/init/$ELASTICSEARCH_SERVICE_NAME.conf
##### ENV #####

# inject required env vars to init script
RUN sed -i '1s|^|ELASTICSEARCH_SERVICE_DIR='$ELASTICSEARCH_SERVICE_DIR' \n|' $ELASTICSEARCH_INIT_FILE

# create service dir
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mkdir -p $ELASTICSEARCH_SERVICE_DIR && \
    check_dir "$ELASTICSEARCH_SERVICE_DIR"'

# extract binaries to service dir
RUN tar -C $ELASTICSEARCH_SERVICE_DIR -xvf {{ elasticsearch.package_dest }}

# place init script in local init dir
# config file is generated
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    mv $ELASTICSEARCH_INIT_FILE /etc/init/ && \
    check_file "/etc/init/$ELASTICSEARCH_SERVICE_NAME.conf"'

# start elasticsearch
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    start $ELASTICSEARCH_SERVICE_NAME && \
    check_upstart $ELASTICSEARCH_SERVICE_NAME'

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - INFLUXDB
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# install dependencies
RUN apt-get install -y $(echo {{ influxdb.reqs }} | tr -d "',[]")
# download binaries
RUN curl {{ influxdb.package_url }} --create-dirs -o {{ influxdb.package_dest }}
##### ENV #####
ENV INFLUXDB_SERVICE_NAME {{ influxdb.service_name }}
##### ENV #####

# install influxdb
RUN dpkg -i {{ influxdb.package_dest }}

#start influxdb
RUN /etc/init.d/$INFLUXDB_SERVICE_NAME start
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - NGINX
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# add nginx repositories to sources.list file and update repo
RUN echo {{ nginx.source_repos }} | tr -d "'["| tr ',]' '\n' >> /etc/apt/sources.list && \
    apt-get update
# install dependencies
RUN apt-get install -y $(echo {{ nginx.reqs }} | tr -d "',[]")

ENV NGINX_SERVICE_NAME {{ nginx.service_name }}

# download and add signing key
RUN curl {{ nginx.source_key }} --create-dirs -o /opt/tmp/nginx/nginx_signing.key && \
    apt-key add /opt/tmp/nginx/nginx_signing.key

# install nginx
RUN apt-get install -y $NGINX_SERVICE_NAME

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# CONTAINER - CELERY
# ------------------------------------------------------------------------------------------------------------------------------------------ #
RUN curl {{ celery.package_url }} --create-dirs -o {{ celery.package_dest }} && \
    mkdir -p {{ celery.untar_dest }} && \
    tar -C {{ celery.untar_dest }} -xzvf {{ celery.package_dest }} && \
    virtualenv {{ celery.untar_dest }} && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.cloudify_rest_client_url }} && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.plugins_common_url }} && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.untar_dest }}/cloudify-manager-master/plugins/agent-installer/ && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.untar_dest }}/cloudify-manager-master/plugins/plugin-installer/ && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.untar_dest }}/cloudify-manager-master/plugins/riemann-controller/ && \
    {{ celery.untar_dest }}/bin/pip install {{ celery.untar_dest }}/cloudify-manager-master/workflows/
